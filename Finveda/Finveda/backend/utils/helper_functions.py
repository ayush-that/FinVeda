import os
import logging
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

# Set up logging
logging.basicConfig(level=logging.INFO)

def setup_logger(name, log_file, level=logging.INFO):
    """
    Setup logger to write logs to a file.
    Args:
    - name (str): Name of the logger.
    - log_file (str): Path to the log file.
    - level (int): Logging level (default is INFO).
    
    Returns:
    - logger: Logger instance.
    """
    logger = logging.getLogger(name)
    handler = logging.FileHandler(log_file)
    handler.setLevel(level)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    return logger

def plot_feature_importance(importances, feature_names, title="Feature Importance"):
    """
    Plot feature importance using a bar plot.
    Args:
    - importances (array-like): The feature importances.
    - feature_names (list): The list of feature names.
    - title (str): Title of the plot (default is "Feature Importance").
    """
    df = pd.DataFrame({
        'Feature': feature_names,
        'Importance': importances
    })
    
    df = df.sort_values(by='Importance', ascending=False)
    
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Importance', y='Feature', data=df)
    plt.title(title)
    plt.show()

def save_plot_to_file(plot_function, file_path, *args, **kwargs):
    """
    Save a plot generated by a plotting function to a file.
    Args:
    - plot_function (function): The plotting function to generate the plot.
    - file_path (str): The path where the plot will be saved.
    - *args: Arguments passed to the plotting function.
    - **kwargs: Keyword arguments passed to the plotting function.
    """
    try:
        plot_function(*args, **kwargs)
        plt.savefig(file_path)
        logging.info(f"Plot saved to {file_path}")
    except Exception as e:
        logging.error(f"Error saving plot: {e}")
        raise

def check_missing_values(data):
    """
    Check for missing values in the dataset.
    Args:
    - data (DataFrame): The dataset to check.
    
    Returns:
    - missing_data (DataFrame): A DataFrame with missing values statistics.
    """
    missing_data = data.isnull().sum()
    missing_data_percentage = (missing_data / len(data)) * 100
    missing_data_df = pd.DataFrame({
        'Missing Values': missing_data,
        'Percentage': missing_data_percentage
    })
    
    missing_data_df = missing_data_df[missing_data_df['Missing Values'] > 0].sort_values(by='Percentage', ascending=False)
    
    return missing_data_df

def plot_missing_values(data):
    """
    Visualize missing values in the dataset using a heatmap.
    Args:
    - data (DataFrame): The dataset to visualize.
    """
    plt.figure(figsize=(12, 8))
    sns.heatmap(data.isnull(), cbar=False, cmap='viridis')
    plt.title("Missing Values Heatmap")
    plt.show()

def calculate_percentage_change(data, column):
    """
    Calculate the percentage change in a column.
    Args:
    - data (DataFrame): The dataset containing the column.
    - column (str): The column to calculate percentage change for.
    
    Returns:
    - data (DataFrame): Data with an added column for percentage change.
    """
    data[f'{column}_Pct_Change'] = data[column].pct_change()
    return data

def save_to_csv(data, file_path):
    """
    Save the DataFrame to a CSV file.
    Args:
    - data (DataFrame): The data to save.
    - file_path (str): The file path to save the CSV file.
    """
    try:
        data.to_csv(file_path, index=False)
        logging.info(f"Data saved to {file_path}")
    except Exception as e:
        logging.error(f"Error saving data to CSV: {e}")
        raise

def generate_train_test_split_report(X_train, X_test, y_train, y_test):
    """
    Generate a report on the dimensions of the train/test data split.
    Args:
    - X_train (DataFrame): The training feature data.
    - X_test (DataFrame): The testing feature data.
    - y_train (Series): The training target data.
    - y_test (Series): The testing target data.
    
    Returns:
    - report (str): A string containing the report of the split dimensions.
    """
    report = f"""
    Train/Test Split Report:
    -------------------------
    X_train shape: {X_train.shape}
    X_test shape: {X_test.shape}
    y_train shape: {y_train.shape}
    y_test shape: {y_test.shape}
    """
    logging.info(report)
    return report

def get_random_sample(data, sample_size=10):
    """
    Get a random sample of data for quick inspection.
    Args:
    - data (DataFrame): The dataset.
    - sample_size (int): The number of rows to sample (default is 10).
    
    Returns:
    - sample (DataFrame): A random sample of the dataset.
    """
    sample = data.sample(n=sample_size, random_state=42)
    return sample

def validate_column_names(data, required_columns):
    """
    Validate if the dataset contains the required columns.
    Args:
    - data (DataFrame): The dataset to validate.
    - required_columns (list): List of required column names.
    
    Returns:
    - missing_columns (list): List of columns missing from the dataset.
    """
    missing_columns = [col for col in required_columns if col not in data.columns]
    
    if missing_columns:
        logging.error(f"Missing columns: {missing_columns}")
    else:
        logging.info("All required columns are present.")
    
    return missing_columns

# Example Usage
# from helper_functions import plot_feature_importance, check_missing_values, save_to_csv

# # Example: Check for missing values
# missing_report = check_missing_values(data)
# print(missing_report)

# # Example: Plot feature importance
# importances = model.feature_importances_  # Assume 'model' is a trained model
# feature_names = data.columns
# plot_feature_importance(importances, feature_names)

# # Example: Save processed data to CSV
# save_to_csv(data, 'cleaned_data.csv')
